types IngameTopbar
{
	type topbar_tab_button = container {
		
		
		button = {
			name = "button"
			position = { 0 0 }
			gfxtype = updownframedbuttongfx
			effectname = "NoHighlight"
			upframe = 1
			downframe = 2
			overframe = 3
			framesize = { 32 32 }
			parentanchor = top|left
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_click"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		
		# Set these:
		# texture
		# onclick
		# shortcut
		# down
		# tooltip
		
		}
		
		widget = {
			state = {
				name = _show
				start_sound = {soundeffect = "event:/SFX/Ambience/2DMapEmitters/Nature/sfx_amb_base_wind"}
			}
		}
	
	
	
	}
}



types Mapmodestuff
{
	type mapmodebutton = button {
		shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
		gfxtype = togglepushbuttongfx
		effectname = "NoHighlight"
		
		upframe = 1
		uphoverframe = 2
		uppressedframe = 3
		downframe = 4
		downhoverframe = 5
		downpressedframe = 6
		
		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		
		block "visibility"
		{
			visible = "[CanChangeMapMode]"
			enabled = "[CanChangeMapMode]"
		}
	}
}

template minimap_view
{
	### MAP ACTIONS ROW 1
	container = {
		name = "minimap_view_1"
		container = {
			name = "actual_map"
			
			mini_map = {
				position = { -17 -2 }
				name = "mini_map"
				parentanchor = bottom|right
				widgetanchor = bottom|right
				texture = "gfx/interface/minimap/minimap.dds"
			}
			container = {
				position = { 0 -50 }
				widget = {
					position = { 0 0 }
					size = { 418 210 }
					parentanchor = bottom|right
					widgetanchor = bottom|right
					using = small_window_columns_type
				}
				
				icon = {
					texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
					spriteType = Corneredtiled
					shaderfile = "gfx/FX/pdxgui_default.shader"
					size = { 100% 54 }
					spriteborder = { 10 20 }
					position = { 1 -42 }
				}
				
				icon = {
					texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
					spriteType = Corneredtiled
					shaderfile = "gfx/FX/pdxgui_default.shader"
					size = { 100% 54 }
					spriteborder = { 10 20 }
					position = { 1 0 }
				}
			
			#icon = {
			#	texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
			#	spriteType = Corneredtiled
			#	shaderfile = "gfx/FX/pdxgui_default.shader"
			#	size = { 100% 42 }
			#	spriteborder = { 10 20 }
			#	position = { 1 10 }
			#}
			}
		}
	}
}

template toolbar
{
	### MAP ACTIONS ROW 1
	
	
	
	flowcontainer = {
		name = "Mapmode_empty_slots"
		direction = horizontal
		position = { 88 2 }
		spacing = 1
		
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
	}
	
	
	
	
	flowcontainer = {
		name = "mapactions_row_1"
		position = { 88 2 }
		spacing = 1
		
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "0"
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_1"
				framesize = { 45 37 }
				shortcut = map_mode_1
				texture = "[GetQuickAccessBar.QuickActionIcon('0')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('0')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('0')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('0')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "1"
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_2"
				framesize = { 45 37 }
				shortcut = map_mode_2
				texture = "[GetQuickAccessBar.QuickActionIcon('1')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('1')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('1')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('1')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "2"
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_3"
				shortcut = map_mode_3
				framesize = { 45 37 }
				texture = "[GetQuickAccessBar.QuickActionIcon('2')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('2')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('2')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('2')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "3"
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_4"
				shortcut = map_mode_4
				framesize = { 45 37 }
				texture = "[GetQuickAccessBar.QuickActionIcon('3')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('3')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('3')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('3')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "4"
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_5"
				shortcut = map_mode_5
				framesize = { 45 37 }
				texture = "[GetQuickAccessBar.QuickActionIcon('4')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('4')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('4')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('4')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "5"
			
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_6"
				shortcut = map_mode_6
				framesize = { 45 37 }
				texture = "[GetQuickAccessBar.QuickActionIcon('5')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('5')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('5')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('5')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			
			dragdropargs = "6"
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_7"
				shortcut = map_mode_7
				framesize = { 45 37 }
				texture = "[GetQuickAccessBar.QuickActionIcon('6')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('6')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('6')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('6')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
	}
	
	settings_button = {
		position = { 4 0 }
		name = "select map modes"
		onclick = "[OnSelectMapModes]"
		tooltip = "CONFIGURE_MAP_MODES"
	}
}

template toolbar2
{
	### MAP ACTIONS ROW 2
	
	flowcontainer = {
		name = "Mapmode_empty_slots2"
		direction = horizontal
		position = { 42 2 }
		spacing = 1
		
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
		icon = {
			size = { 45 37 }
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			texture = "gfx/interface/tiles/sharp_dent_tiles.dds"
		}
	}
	
	
	
	
	flowcontainer = {
		name = "mapactions_row_2"
		position = { 42 2 }
		spacing = 1
		
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "7"
			
			size = { 45 37 }
			button = {
				size = { 45 37 }
				name = "quick_action_8"
				shortcut = map_mode_10
				framesize = { 45 37 }
				texture = "[GetQuickAccessBar.QuickActionIcon('7')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('7')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('7')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('7')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "8"
			size = { 45 37 }
			
			button = {
				size = { 45 37 }
				name = "quick_action_9"
				framesize = { 45 37 }
				shortcut = map_mode_11
				texture = "[GetQuickAccessBar.QuickActionIcon('8')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('8')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('8')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('8')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "9"
			size = { 45 37 }
			button = {
				size = { 45 37 }
				name = "quick_action_10"
				framesize = { 45 37 }
				shortcut = map_mode_12
				texture = "[GetQuickAccessBar.QuickActionIcon('9')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('9')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('9')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('9')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "10"
			size = { 45 37 }
			button = {
				size = { 45 37 }
				name = "quick_action_11"
				framesize = { 45 37 }
				shortcut = map_mode_13
				texture = "[GetQuickAccessBar.QuickActionIcon('10')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('10')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('10')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('10')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "11"
			size = { 45 37 }
			button = {
				size = { 45 37 }
				name = "quick_action_12"
				framesize = { 45 37 }
				shortcut = map_mode_14
				texture = "[GetQuickAccessBar.QuickActionIcon('11')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('11')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('11')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('11')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "12"
			size = { 45 37 }
			button = {
				size = { 45 37 }
				name = "quick_action_13"
				framesize = { 45 37 }
				shortcut = map_mode_15
				texture = "[GetQuickAccessBar.QuickActionIcon('12')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('12')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('12')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('12')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
		dragdroptarget = {
			dragdropid = "quick_access"
			dragdropargs = "13"
			size = { 45 37 }
			button = {
				size = { 45 37 }
				name = "quick_action_14"
				framesize = { 45 37 }
				shortcut = map_mode_16
				texture = "[GetQuickAccessBar.QuickActionIcon('13')]"
				onclick = "[GetQuickAccessBar.QuickActionApply('13')]"
				onrightclick = "[GetQuickAccessBar.DropSlot('13')]"
				tooltip = "[GetQuickAccessBar.QuickActionDesc('13')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_map_mode"
			}
		}
	}
}

vbox = {
	name = "ingame_topbar"
	
	window = {
		layoutpolicy_horizontal = Expanding
		layoutpolicy_vertical = Expanding
		layoutstretchfactor_vertical = 20
		alwaystransparent = yes
		
		widget = {
			name = "top_bar_bg"
			size = { 100% 160 }
			position = { 0 0 }
			alwaystransparent = yes
			
			icon = {
				name = "topbar_bg_left"
				position = { 1070 0 }
				texture = "gfx/interface/topbar/top_bar_left.dds"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				size = { 1200 90 }
				alwaystransparent = no
				widgetanchor = top|right
			}
			
			icon = {
				name = "topbar_bg_center"
				position = { 1070 0 }
				texture = "gfx/interface/topbar/top_bar_center.dds"
				alwaystransparent = yes
			}
			
			icon = {
				name = "topbar_bg_right"
				position = { 1112 0 }
				texture = "gfx/interface/topbar/top_bar_right.dds"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				size = { 100% 52 }
				alwaystransparent = no
			}
			
			
			#icon = {
			#	name = "beta_sign"
			#	position = { -210 50 }
			#	parentanchor = top|right
			#	texture = "gfx/interface/topbar/alpha_sign.dds"
			#	tooltip = "BETA_SIGN_TT"
			#}
			
			icon = {
				name = "cloud_save_indicator"
				position = { -238 50 }
				scale = 0.85
				parentanchor = top|right
				texture = "gfx/interface/cloud_uplink.dds"
				shaderfile = "gfx/FX/pdxgui_glow_game.shader"
				tooltip = "CLOUD_SAVE_IN_PROGRESS_TOOLTIP"
				visible = "[GameIsCloudStorageOperationInProgress]"
			}
		
		}
		
		container = {
			position = { 0 152 }
			visible = "[InGameTopbar.IsTutorialActive]"
			
			icon = {
				texture = "gfx/interface/tiles/button_base.dds"
			}
			button = {
				position = { 6 57 }
				texture = "gfx/interface/buttons/button_tutorial.dds"
				frame = "[InGameTopbar.GetTutorialFrame]"
				onclick = "[InGameTopbar.OpenView('tutorial_objectives')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
				forcedown = "[IsGameViewOpen('tutorial_objectives')]"
				gfxtype = buttongfx
				framesize = { 49 49 }
			}
		}
		
		container = {
			position = { 56 92 }
			
			icon = {
				texture = "gfx/interface/tiles/button_base.dds"
			}
			
			button = {
				position = { 6 57 }
				texture = "gfx/interface/buttons/button_macro_builder.dds"
				onclick = "[InGameTopbar.OpenView('macro_builder')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
				forcedown = "[IsGameViewOpen('macro_builder')]"
				tooltip = "MACRO_BUILDER_MENU"
				gfxtype = buttongfx
				shortcut = macro_builder
			}
		}
		
		
		icon = {
			texture = "gfx/interface/topbar/flag_shadow.dds"
		}
		
		banner_widget = {
			position = { -14 -115 }
			size = { 155 355 }
			entity_instance = "[InGameTopbar.GetFlagEntity]"
			color = "[InGameTopbar.AccessCoatOfArms.GetColor('(int32)1')]"
			texture = "[InGameTopbar.AccessCoatOfArms.GetTexture('(int32)155','(int32)355')]"
			frame = "[InGameTopbar.AccessCoatOfArms.GetFrame('(int32)155','(int32)355')]"
			framesize = { 155 355 }
			tooltip = "[InGameTopbar.GetFlagDesc]"
			realtime = yes
			
			button = {
				position = { -14 -115 }
				size = { 155 355 }
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot( Player.MakeScope ).End)]"
				datacontext = "[GetScriptedGui('country_details_open')]"
			}
		}
		
		widget = {
			position = { 56 132 }
			size = { 60 68 }
			
			tooltip = "MACRO_BUILDER_MENU"
			shortcut = macro_builder
		}
		
		widget = {
			position = { 0 190 }
			size = { 60 68 }
			visible = "[InGameTopbar.IsTutorialActive]"
			
			tooltip = "TUTORIAL_MENU"
		}
		
		flowcontainer = {
			name = "Resources"
			position = { 145 5 }
			
			button = {
				name = "treasury"
				size = { 116 40 }
				onclick = "[OpenGameView('economy')]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "treasury_icon"
					position = { 1 -2 }
					size = { 36 36 }
					using = icon_treasury
				}
				
				textbox = {
					name = "treasury_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetTreasury|0]"
					widgetanchor = top|hcenter
				}
				
				icon = {
					name = "plus"
					position = { -1 3 }
					size = { 36 36 }
					using = icon_plus
					visible = [InGameTopbar.GetPlayer.HasPositiveBalance]
				}
				
				
				icon = {
					name = "minus"
					position = { -1 3 }
					size = { 36 36 }
					using = icon_minus
					visible = "[Not(InGameTopbar.GetPlayer.HasPositiveBalance)]"
				}
				
				tooltip = [InGameTopbar.GetPlayer.GetTreasuryTooltip]
			}
			
			button = {
				name = "manpower"
				size = { 116 40 }
				onclick = "[OpenGameView('military')]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "manpower_icon"
					position = { 2 0 }
					size = { 36 36 }
					using = icon_manpower
				}
				textbox = {
					name = "manpower_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetManpower]"
					widgetanchor = top|hcenter
				}
				
				icon = {
					name = "plus"
					position = { -1 3 }
					size = { 36 36 }
					using = icon_plus
					visible = [InGameTopbar.GetPlayer.HasPositiveManpower]
				}
				
				
				icon = {
					name = "minus"
					position = { -1 3 }
					size = { 36 36 }
					using = icon_minus
					visible = "[Not(InGameTopbar.GetPlayer.HasPositiveManpower)]"
				}
				
				tooltip = [InGameTopbar.GetPlayer.GetManpowerTooltip]
			}
			
			widget = {
				name = "Divider"
				size = { 25 34 }
				
				icon = {
					name = "vertical_divider_1"
					texture = "gfx/interface/tiles/vertical_divider.dds"
					spriteType = corneredtiled
					spriteborder = { 0 10 }
					size = { 6 34 }
					alpha = 0.5
					position = { 7 0 }
				}
			}
			
			button = {
				name = "political_influence"
				size = { 116 40 }
				alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetPoliticalInfluence)]"
				onclick = "[OpenGovernmentOfficesView]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "political_influence_icon"
					position = { 2 0 }
					size = { 36 36 }
					using = icon_political_influence
				}
				
				textbox = {
					name = "political_influence_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetPoliticalInfluence|0]"
					widgetanchor = top|hcenter
				}
				
				tooltip = [InGameTopbar.GetPlayer.GetPoliticalInfluenceDescription]
			}
			
			button = {
				name = "military_exp"
				size = { 116 40 }
				alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetMilitaryExperience)]"
				onclick = "[InGameTopbar.OpenView('military')]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "military_expe_icon"
					position = { 2 0 }
					size = { 36 36 }
					using = icon_military_experience
				}
				
				textbox = {
					name = "military_exp_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetMilitaryExperience|0]"
					widgetanchor = top|hcenter
				}
				
				tooltip = [InGameTopbar.GetPlayer.GetMilitaryExperienceDescription]
			}
			
			widget = {
				size = { 25 34 }
				
				icon = {
					name = "vertical_divider_1"
					texture = "gfx/interface/tiles/vertical_divider.dds"
					spriteType = corneredtiled
					spriteborder = { 0 10 }
					size = { 6 34 }
					alpha = 0.5
					position = { 7 0 }
				}
			}
			
			button = {
				name = "stability"
				size = { 116 40 }
				onclick = "[OpenGameView('religion')]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "stability_icon"
					position = { 2 -1 }
					size = { 36 36 }
					using = icon_stability
				}
				
				textbox = {
					name = "stability_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetStability|2]"
					widgetanchor = top|hcenter
				}
				
				icon = {
					name = "plus"
					size = { 36 36 }
					using = icon_plus
					visible = "[GreaterThan_CFixedPoint(InGameTopbar.GetPlayer.GetMonthlyStabilityChange, '(CFixedPoint)0')]"
				}
				
				icon = {
					name = "minus"
					size = { 36 36 }
					using = icon_minus
					visible = "[LessThan_CFixedPoint(InGameTopbar.GetPlayer.GetMonthlyStabilityChange, '(CFixedPoint)0')]"
				}
				
				tooltip = [InGameTopbar.GetPlayer.GetStabilityTooltipPlayer]
			}
			
			button = {
				name = "aggressive_expansion"
				size = { 116 40 }
				alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetCurrentAgressiveExpansion)]"
				onclick = "[OpenGameView('overview')]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "aggressive_expansion_icon"
					position = { 2 -1 }
					size = { 36 36 }
					using = icon_aggressive_expansion
				}
				
				textbox = {
					name = "aggressive_expansion_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetCurrentAgressiveExpansion|2]"
					widgetanchor = top|hcenter
				}
				
				tooltip = "[InGameTopbar.GetPlayer.GetCurrentAgressiveExpansionInfo]"
			}
			
			button = {
				name = "tyranny"
				size = { 116 40 }
				alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetTyranny)]"
				onclick = "[OpenGameView('characters')]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "tyranny_icon"
					position = { 2 0 }
					size = { 36 36 }
					using = icon_tyranny
				}
				
				textbox = {
					name = "tyranny_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetTyranny|2]"
					widgetanchor = top|hcenter
				}
				
				tooltip = [InGameTopbar.GetPlayer.GetTyrannyTooltip]
			}
			
			button = {
				name = "warexhaustion"
				size = { 116 40 }
				alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetWarExhaustion)]"
				onclick = "[OpenGameView('religion')]"
				
				icon = {
					name = "value_frame"
					position = { 0 -2 }
					texture = "gfx/interface/tiles/icon_value_tiles.dds"
					spriteType = Corneredtiled
					spriteborder = { 48 48 }
					size = { 110 40 }
				}
				
				icon = {
					name = "war_exhaustion_icon"
					position = { 2 0 }
					size = { 36 36 }
					texture = "gfx/interface/icons/modifiers/war_exhaustion.dds"
				}
				
				textbox = {
					name = "tyranny_value"
					position = { 72 3 }
					using = MarbleButtonFont
					autoresize = yes
					text = "[InGameTopbar.GetPlayer.GetWarExhaustion|2]"
					widgetanchor = top|hcenter
				}
				
				tooltip = [InGameTopbar.GetPlayer.GetWarExhaustionTooltipPlayer]
			}
			
			flowcontainer = {
				ignoreinvisible = yes
				widget = {
					name = "legitimacy"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsMonarchy]"
					size = { 116 40 }
					alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetLegitimacy)]"
					
					icon = {
						name = "value_frame"
						position = { 0 -2 }
						texture = "gfx/interface/tiles/icon_value_tiles.dds"
						spriteType = Corneredtiled
						spriteborder = { 48 48 }
						size = { 110 40 }
					}
					
					icon = {
						name = "legitimacy_icon"
						position = { 2 0 }
						size = { 36 36 }
						texture = "gfx/interface/icons/shared_icons/legitimacy.dds"
					}
					
					textbox = {
						name = "legitimacy_value"
						position = { 72 3 }
						using = MarbleButtonFont
						autoresize = yes
						text = "[InGameTopbar.GetPlayer.GetLegitimacy|2]"
						widgetanchor = top|hcenter
					}
					
					tooltip = [InGameTopbar.GetPlayer.GetLegitimacyTooltip]
				}
				
				button = {
					name = "centralization_icon"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsTribal]"
					size = { 116 40 }
					alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetCentralization)]"
					onclick = "[OpenGameView('government')]"
					tooltip = "[InGameTopbar.GetPlayer.GetCentralizationTooltip]"
					
					icon = {
						name = "value_frame"
						position = { 0 -2 }
						texture = "gfx/interface/tiles/icon_value_tiles.dds"
						spriteType = Corneredtiled
						spriteborder = { 48 48 }
						size = { 110 40 }
					}
					
					icon = {
						name = "centralization_icon"
						position = { 2 0 }
						size = { 36 36 }
						texture = "gfx/interface/icons/shared_icons/centralization.dds"
					}
					
					textbox = {
						name = "legitimacy_value"
						position = { 72 3 }
						using = MarbleButtonFont
						autoresize = yes
						text = "[InGameTopbar.GetPlayer.GetCentralization|2]%"
						widgetanchor = top|hcenter
					}
				}
				
				#TODO SU TOOLTIP AND LOC ETC
				button = {
					name = "Senate Approval"
					visible = "[InGameTopbar.GetPlayer.GetGovernment.IsRepublic]"
					size = { 116 40 }
					alpha = "[TransparentIfZero(InGameTopbar.GetPlayer.GetSenateApproval)]"
					onclick = "[OpenGameView('government')]"
					tooltip = "[InGameTopbar.GetPlayer.GetSenateApprovalTooltip]"
					
					icon = {
						name = "senate approval frame"
						position = { 0 -2 }
						texture = "gfx/interface/tiles/icon_value_tiles.dds"
						spriteType = Corneredtiled
						spriteborder = { 48 48 }
						size = { 110 40 }
					}
					
					icon = {
						name = "Senate Approval Icon"
						position = { 4 0 }
						size = { 30 30 }
						framesize = { 42 42 }
						frame = 1
						texture = "gfx/interface/diplomacy/icon_senate_approval.dds"
						visible = "[GreaterThanOrEqualTo_CFixedPoint( InGameTopbar.GetPlayer.GetSenateApproval, '(CFixedPoint)50' )]"
					}
					
					icon = {
						name = "Senate Approval Icon2"
						position = { 3 0 }
						size = { 30 30 }
						framesize = { 42 42 }
						frame = 2
						texture = "gfx/interface/diplomacy/icon_senate_approval.dds"
						visible = "[LessThan_CFixedPoint( InGameTopbar.GetPlayer.GetSenateApproval, '(CFixedPoint)50' )]"
					}
					
					textbox = {
						name = "senate approval value"
						position = { 72 3 }
						using = MarbleButtonFont
						autoresize = yes
						text = "[InGameTopbar.GetPlayer.GetSenateApproval|2]"
						widgetanchor = top|hcenter
					}
				}
			}
			
			overlappingitembox = {
				size = { 180 90 }
				
				datamodel = "[InGameTopbar.GetPlayer.MakeScope.GetList('captured_eagles')]"
				
				item = {
					button = {
						using = icon_roman_eagle
						size = { 36 36 }
						datacontext = "[Scope.Province]"
						parentanchor = top|left
						tooltip = "eagle_capture_banner_tooltip"
						
						onclick = "[OnClickOnProvince( Scope.Province )]"
					
					}
				}
			}
		
		}
		
		
		### MAIN TABS
		
		
		container = {
			name = "mains tabs"
			position = { 100 48 }
			#size = { 80 500}
			
			widgetanchor = top|left
			parentanchor = top|left
			alwaystransparent = no
			
			flowcontainer = {
				name = "button_overview"
				position = { 46 9 }
				
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_overview.dds"
						onclick = "[InGameTopbar.OpenView('overview')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('overview')]"
						tooltip = "NATION_OVERVIEW_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_1"
					
					}
				
				
				
				}
				#	}
				#
				#	flowcontainer = {
				#		name = "buttons_first"
				#		position = { 143 9 }
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_government.dds"
						onclick = "[InGameTopbar.OpenView('government')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('government')]"
						tooltip = "GOVERNMENT_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_2"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_military.dds"
						onclick = "[InGameTopbar.OpenView('military')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('military')]"
						tooltip = "MILITARY_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_3"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_technology.dds"
						onclick = "[InGameTopbar.OpenView('technology')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('technology')]"
						tooltip = "TECHNOLOGY_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_4"
					}
				}
				
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_religion.dds"
						onclick = "[InGameTopbar.OpenView('religion')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('religion')]"
						tooltip = "RELIGION_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_5"
					}
				}
				
				#	}
				#
				#	flowcontainer = {
				#		name = "buttons_second"
				#		position = { 470 9 }
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						
						using = top_bar_button_spacing
						shortcut = "top_bar_6"
						texture = "gfx/interface/topbar/top_bar_button_culture.dds"
						onclick = "[InGameTopbar.OpenView('culture')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('culture')]"
						tooltip = "CULTURE_MENU"
						shortcut = "top_bar_6"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_economy.dds"
						onclick = "[InGameTopbar.OpenView('economy')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('economy')]"
						tooltip = "ECONOMY_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_7"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_diplomacy.dds"
						onclick = "[InGameTopbar.OpenView('diplomacy')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('diplomacy')]"
						tooltip = "DIPLOMACY_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_8"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_trade.dds"
						onclick = "[InGameTopbar.OpenView('trade')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('trade')]"
						tooltip = "TRADE_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_9"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_characters.dds"
						onclick = "[InGameTopbar.OpenView('characters')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('characters')]"
						tooltip = "CHARACTERS_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_10"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_mercenary.dds"
						onclick = "[InGameTopbar.OpenView('mercenary')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('mercenary')]"
						tooltip = "MERCENARY_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_11"
					}
				}
				
				topbar_tab_button = {
					
					icon = {
						name = "shade_for_button"
						using = top_bar_button_shade_spacing
					}
					
					button = {
						texture = "gfx/interface/topbar/top_bar_button_missions.dds"
						onclick = "[InGameTopbar.OpenView('mission')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
						oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
						forcedown = "[IsGameViewOpen('mission')]"
						tooltip = "MISSION_MENU"
						using = top_bar_button_spacing
						shortcut = "top_bar_12"
					}
				}
			
			#### TODO Decisions Button goes into Nation overview UI
			
			#topbar_tab_button = {
			
			#	icon = {
			#		name = "shade_for_button"
			#		using = top_bar_button_shade_spacing
			#	}
			
			#	button = {
			#		texture = "gfx/interface/topbar/top_bar_button_decisions.dds"
			#		onclick = "[InGameTopbar.OpenView('decisions')]"
			#		clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_tab"
			#		oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
			#		forcedown = "[IsGameViewOpen('decisions')]"
			#		tooltip = "DECISIONS_MENU"
			#		using = top_bar_button_spacing
			#		shortcut = "top_bar_13"
			#	}
			#}
			}
		}
		
		widget = {
			size = { 400 100 }
			position = { 0 240 }
			parentanchor = hcenter
			visible = "[IsGamePaused]"
			alpha = 0
			icon = {
				texture = "gfx/interface/tiles/pause_banner_no_stick.dds"
				alwaystransparent = yes
				
				textbox = {
					position = { 0 14 }
					autoresize = yes
					text = "Game_Paused"
					parentanchor = top|hcenter
					widgetanchor = top|hcenter
					using = GoldenFontL
					fontsize = 28
				}
			}
			
			state = {
				name = _show
				
				on_start = "[PdxGuiWidget.TriggerAnimation('pausedown')]"
			}
			
			state = {
				name = pausedown
				
				animation = {
					alpha = 1
				}
				
				duration = 0.15
			}
			
			state = {
				name = _hide
				
				animation = {
					alpha = 0
				}
				
				duration = 0.15
			}
		
		}
		
		widget = {
			position = { 1 1 }
			name = "minimap_and_buttons"
			parentanchor = bottom|right
			widgetanchor = bottom|right
			#	direction = vertical
			size = { 450 380 }
			
			state = {
				name = hide_minimap_anim
				
				animation = {
					position = { 1 180 }
					bezier = { 1 0.4 0.25 0.25 }
				}
				
				duration = 0.2
				
				on_start = "[PdxGuiTriggerAllAnimations('embiggen_stanley')]"
				on_start = "[PdxGuiTriggerAllAnimations('close_mapmode_selector')]"
			}
			
			state = {
				name = show_minimap_anim
				
				animation = {
					position = { 1 1 }
					bezier = { 1 0.4 0.25 0.1 }
				}
				
				
				duration = 0.2
				
				on_start = "[PdxGuiTriggerAllAnimations('ensmallen_stanley')]"
			
			}
			
			container = {
				name = "minimap_view"
				position = { 3 0 }
				parentanchor = bottom|right
				widgetanchor = bottom|right
				using = minimap_view
			}
			
			container = {
				name = "toolbar"
				position = { 37 103 }
				#parentanchor = bottom|right
				#widgetanchor = bottom|right
				using = toolbar
			}
			
			container = {
				name = "toolbar2"
				position = { 83 144 }
				#parentanchor = bottom|right
				#widgetanchor = bottom|right
				using = toolbar2
			}
			
			container = {
				position = { 84 85 }
				
				button = {
					#size = { 40 40 }
					name = "hide minimap"
					texture = "gfx/interface/buttons/minimap_button_hide.dds"
					#framesize = { 45 37 }
					onclick = "[PdxGuiTriggerAllAnimations('hide_minimap_anim')]"
					onclick = "[PdxGuiWidget.AccessParent.FindChild('show minimap').Show]"
					onclick = "[PdxGuiWidget.Hide]"
					position = { 0 25 }
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_options"
				}
				
				button = {
					#size = { 40 40 }
					visible = no
					name = "show minimap"
					texture = "gfx/interface/buttons/minimap_button_show.dds"
					#framesize = { 45 37 }
					onclick = "[PdxGuiTriggerAllAnimations('show_minimap_anim')]"
					onclick = "[PdxGuiWidget.AccessParent.FindChild('hide minimap').Show]"
					onclick = "[PdxGuiWidget.Hide]"
					position = { 0 25 }
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_options"
				}
			}
			
			flowcontainer = {
				name = "map_buttons"
				position = { 46 152 }
				spacing = -1
				
				button = {
					#size = { 45 37 }
					name = "find_province"
					onclick = "[OnFindProvince]"
					shortcut = "find_province"
					
					#gfxtype = buttongfx
					#effectname = "NoHighlight"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
					oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
					visible = "[CanChangeMapMode]"
					
					texture = "gfx/interface/buttons/minimap_button_find.dds"
					framesize = { 38 29 }
					
					tooltip = "MAPACTION_FIND_PROVINCE"
				}
				button = {
					#size = { 40 40 }
					name = "go_to_capital"
					onclick = "[GoToCapital]"
					shortcut = "go_to_capital"
					
					#gfxtype = buttongfx
					#effectname = "NoHighlight"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
					oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
					visible = "[CanChangeMapMode]"
					
					texture = "gfx/interface/buttons/minimap_button_home.dds"
					framesize = { 38 29 }
					
					tooltip = "MAPACTION_GO_TO_CAPITAL"
				}
			}
			
			icon = {
				name = "Stanley"
				texture = "gfx/interface/tiles/small_window_title_header_corners.dds"
				spriteType = Corneredtiled
				shaderfile = "gfx/FX/pdxgui_default.shader"
				size = { 420 23 }
				spriteborder = { 10 20 }
				position = { 6 -145 }
				parentanchor = bottom|right
				widgetanchor = bottom|right
				visible = no
				
				state = {
					name = embiggen_stanley
					
					animation = {
						position = { 6 -175 }
					}
					
					duration = 0
					
					on_start = "[PdxGuiWidget.Show]"
				
				}
				
				state = {
					name = ensmallen_stanley
					
					animation = {
						position = { 6 -145 }
					}
					
					duration = 0
					
					on_finish = "[PdxGuiWidget.Hide]"
				
				}
			
			
			
			}
		
		}
		
		### TOPBAR CORNER ASSET
		icon = {
			name = "bg"
			position = { 0 0 }
			parentanchor = top|right
			size = { 270 90 }
			texture = "gfx/interface/topbar/top_bar_right_corner.dds"
		}
		
		
		### DATE
		window = {
			name = "date"
			size = { 210 108 }
			parentanchor = top|right
			position = { 0 0 }
			movable = no
			
			icon_time_indicator = {
				position = { -51 48 }
				parentanchor = top|right
				frame = "[GetCurrentGameSpeed]"
			}
			
			icon = {
				name = "date_frame"
				position = { -51 5 }
				texture = "gfx/interface/tiles/value_slot_corner_tiles.dds"
				spriteType = Corneredtiled
				parentanchor = top|right
				spriteborder = { 12 12 }
				size = { 140 40 }
			}
			
			textbox = {
				name = "date_text"
				position = { -51 15 }
				size = { 140 20 }
				using = MarbleButtonFont
				parentanchor = top|right
				#autoresize = yes
				text = "CURRENT_DATE"
				tooltip = "CURRENT_DATE_TOOLTIP"
				align = center|nobaseline
			}
			
			container = {
				position = { -187 60 }
				parentanchor = top|right
				
				visible = no
				
				icon = {
					name = "replay_frame"
					position = { 0 0 }
					parentanchor = top|right
					texture = "gfx/interface/topbar/top_bar_button_frame_small.dds"
				}
				
				play_button = {
					name = "open_replay_button"
					size = { 42 42 }
					
					visible = "[Not(IsReplayShown)]"
					
					position = { 1 4 }
					
					onclick = "[OnToggleReplay]"
					
					tooltip = "OPEN_REPLAY"
				}
				
				pause_button = {
					name = "close_replay_button"
					size = { 42 42 }
					
					position = { 1 4 }
					
					visible = "[IsReplayShown]"
					
					onclick = "[OnToggleReplay]"
					
					tooltip = "CLOSE_REPLAY"
				}
			}
			
			container = {
				position = { -143 60 }
				parentanchor = top|right
				
				icon = {
					name = "play_frame"
					position = { 0 0 }
					parentanchor = top|right
					texture = "gfx/interface/topbar/top_bar_button_frame_small.dds"
				}
				
				play_button = {
					name = "play_button"
					size = { 42 42 }
					
					visible = "[IsGamePaused]"
					position = { 1 4 }
					
					onclick = "[OnPause]"
					shortcut = pause
					
					tooltip = "UNPAUSE_GAME"
				}
				
				pause_button = {
					name = "pause_button"
					size = { 42 42 }
					
					position = { 1 4 }
					
					visible = "[Not(IsGamePaused)]"
					
					onclick = "[OnPause]"
					shortcut = pause
					
					tooltip = "PAUSE_GAME"
				}
			}
			
			container = {
				position = { -96 60 }
				parentanchor = top|right
				
				
				icon = {
					name = "minus_frame"
					position = { 0 0 }
					texture = "gfx/interface/topbar/top_bar_button_frame_small.dds"
				}
				
				minus_button = {
					size = { 42 42 }
					shortcut = "decrease_speed"
					onclick = "[OnDecreaseGameSpeed]"
					position = { 1 4 }
					tooltip = "DECREASE_GAME_SPEED"
					enabled = "[CanChangeGameSpeed]"
				}
			}
			
			container = {
				position = { -49 60 }
				parentanchor = top|right
				
				icon = {
					name = "plus_frame"
					position = { 0 0 }
					texture = "gfx/interface/topbar/top_bar_button_frame_small.dds"
				}
				
				plus_button = {
					size = { 42 42 }
					shortcut = "increase_speed"
					onclick = "[OnIncreaseGameSpeed]"
					position = { 1 4 }
					tooltip = "INCREASE_GAME_SPEED"
					enabled = "[CanChangeGameSpeed]"
				}
			}
			
			container = {
				position = { -2 60 }
				parentanchor = top|right
				
				icon = {
					name = "menu_frame"
					position = { 0 0 }
					texture = "gfx/interface/topbar/top_bar_button_frame_small.dds"
				}
				
				menu_button = {
					name = "outliner_button_icon"
					texture = "gfx/interface/buttons/outliner_button.dds"
					size = { 42 42 }
					shortcut = "outliner"
					onclick = "[OnToggleOutliner]"
					position = { 1 4 }
					tooltip = "OUTLINER_SHOWHIDE_TOOLTIP"
				}
			}
			
			menu_button = {
				name = "menu_button_icon"
				position = { -6 6 }
				parentanchor = top|right
				size = { 42 42 }
				shortcut = "close_window"
				onclick = "[OnPauseMenu]"
				tooltip = "SHOW_MENU"
			}
		}
		
		### LAGGING PLAYER NOTIFICATION
		widget = {
			using = ScrollMessageBackground
			using = clickthrough_blocker
			size = { 210 100 }
			position = { -100 -298 }
			parentanchor = bottom|right
			visible = "[GetPlayerIsLagging]"
			
			textbox = {
				size = { 180 70 }
				position = { 14 16 }
				using = MarbleButtonFont
				multiline = yes
				text = "[GetLaggingPlayerString]"
				align = center|nobaseline
			}
		}
		
		###
		textbox = {
			position = { 0 400 }
			using = FontHeading1
			parentanchor = top|hcenter
			autoresize = yes
			text = "AUTOSAVE_IN_PROGRESS"
			align = center|nobaseline
			visible = "[IsAutoSaving]"
		}
		
		textbox = {
			position = { 0 190 }
			using = FontHeading1
			parentanchor = top|hcenter
			autoresize = yes
			text = "SAVE_IN_PROGRESS"
			align = center|nobaseline
			visible = "[IsSaving]"
		}
		
		
		container = {
			position = { -210 1 }
			parentanchor = top|right
			widgetanchor = top|right
			tooltip = "TOPBAR_SCORE_TOOLTIP"
			
			button = {
				gfxtype = buttongfx
				position = { 0 0 }
				size = { 44 44 }
				
				texture = "gfx/interface/buttons/score_button.dds"
				onclick = "[InGameTopbar.OpenView('view_score')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
			}
			
			icon = {
				name = "score_frame"
				position = { 46 6 }
				texture = "gfx/interface/tiles/value_slot_corner_tiles.dds"
				spriteType = Corneredtiled
				spriteborder = { 12 12 }
				size = { 92 32 }
				
				textbox = {
					parentanchor = top|hcenter
					autoresize = yes
					position = { 0 2 }
					text = "[InGameTopbar.GetPlayer.GetScore|0]"
					using = MarbleButtonFontS
				}
			}
		}
		
		
		flowcontainer = {
			position = { -350 1 }
			parentanchor = top|right
			widgetanchor = top|right
			tooltip = "LEDGER"
			
			button = {
				gfxtype = buttongfx
				#size = { 44 44 }
				texture = "gfx/interface/buttons/button_value_base.dds"
				onclick = "[InGameTopbar.OpenView('ledger')]"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_decrement"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
				
				icon = {
					texture = "gfx/interface/icons/shared_icons/ledger.dds"
					position = { 1 1 }
					size = { 32 32 }
					parentanchor = vcenter|hcenter
				}
			}
			
			button = {
				texture = "gfx/interface/buttons/log_button.dds"
				onclick = "[ToggleMessageLog]"
				tooltip = "MESSAGE_LOG_TT"
			}
		}
		
		window = {
			name = "event_window"
			size = { 318 202 }
			position = { 0 600 }
			parentanchor = right
			background = {
				texture = "gfx/interface/icons/outliner/outliner_backdrop_small.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
			}
			
			button = {
				name = "event_queue_hide"
				texture = "gfx/interface/buttons/outliner_button.dds"
				size = { 42 42 }
				onclick = "[PdxGuiWidget.AccessParent.TriggerAnimation('slide_out')]"
				tooltip = "MINIMIZE_EVENT_QUEUE"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_options"
			
			#textbox = {
			#	visible = "[GreaterThan_int32( GetDataModelSize( InGameTopbar.GetMinorEventItems ), '(int32)0')]"
			#	text = "[GetDataModelSize( InGameTopbar.GetMinorEventItems )]"
			#	using = MarbleButtonFontL
			#	parentanchor = center
			#	align = center
			#	position = { 1 -4 }
			#}
			
			}
			
			button = {
				name = "event_queue_show"
				texture = "gfx/interface/buttons/outliner_button.dds"
				size = { 42 42 }
				onclick = "[PdxGuiWidget.AccessParent.TriggerAnimation('slide_in')]"
				tooltip = "MAXIMIZE_EVENT_QUEUE"
				visible = no
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_game_options"
			
			#textbox = {
			#	visible = "[GreaterThan_int32( GetDataModelSize( InGameTopbar.GetMinorEventItems ), '(int32)0')]"
			#	text = "[GetDataModelSize( InGameTopbar.GetMinorEventItems )]"
			#	using = MarbleButtonFontL
			#	parentanchor = center
			#	align = center
			#	position = { 1 -4 }
			#}
			
			}
			
			flowcontainer = {
				direction = vertical
				
				
				textbox = {
					size = { 318 33 }
					text = "event_queue_title"
					align = center
					using = MarbleButtonFont
				}
				widget = {
					name = "spacery"
					size = { 0 10 }
				}
				fixedgridbox = {
					size = { 300 300 }
					addcolumn = 300
					addrow = 38
					maxhorizontalslots = 1
					maxverticalslots = 4
					datamodel = "[InGameTopbar.GetMinorEventItems]"
					
					item = {
						container = {
							textbox = {
								using = BlackMarbleFont
								text = "[MinorEventItem.GetDaysRemaining]"
								size = { 36 36 }
								align = center
								position = { 8 -4 }
							}
							button = {
								size = { 260 36 }
								texture = "gfx/interface/frontend/title_hovers.dds"
								textbox = {
									using = BlackMarbleFont
									text = "[MinorEventItem.GetTitle]"
									fontsize = 18
									size = { 328 0 }
									parentanchor = center
									position = { 0 -4 }
									align = center
								}
								#spriteType = CorneredTiled
								#spriteborder = { 1 1 }
								gfxtype = framedbuttongfx
								position = { 40 0 }
								framesize = { 328 43 }
								upframe = 2
								downframe = 1
								overframe = 2
								disableframe = 2
								
								#button_trigger = none
								onclick = "[MinorEventItem.OnClick]"
								onrightclick = "[MinorEventItem.OnRightClick]"
								clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
								oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
								datacontext = "[MinorEventItem]"
								tooltip = "interface_option_default_minor_event_window_why_is_this_key_so_long"
								
								modify_texture = {
									name = "glow_event_q"
									texture = "gfx/interface/frontend/title_hovers.dds"
									framesize = { 328 43 }
									blend_mode = colordodge
								}
								
								state = {
									
									name = "minoreventitem_flash_down"
									
									animation = {
										modify_texture = {
											name = "glow_event_q"
											alpha = 1
										}
									}
									
									duration = 0.4
									
									trigger_on_create = yes
									next = "minoreventitem_flash_up"
								
								}
								
								state = {
									
									name = "minoreventitem_flash_up"
									
									animation = {
										modify_texture = {
											name = "glow_event_q"
											alpha = 0.2
										}
									}
									
									duration = 0.4
									
									next = "minoreventitem_flash_down"
								
								}
							
							}
						}
					}
				}
			}
			
			state = {
				name = slide_out
				
				animation = {
					position = { 278 596 }
				}
				
				duration = 0.15
				
				on_finish = "[PdxGuiWidget.FindChild('event_queue_hide').Hide]"
				on_finish = "[PdxGuiWidget.FindChild('event_queue_show').Show]"
			
			}
			
			state = {
				name = slide_in
				
				animation = {
					position = { 0 596 }
				}
				
				duration = 0.15
				
				on_finish = "[PdxGuiWidget.FindChild('event_queue_hide').Show]"
				on_finish = "[PdxGuiWidget.FindChild('event_queue_show').Hide]"
			
			}
		
		
		}
		#This seems like a stupid place to add this, but I can't figure out how to get Imperator to use a new .gui file
		window = {
			name = "country_details"
			size = { 650 840 }
			position = { 600 200 }
			allow_outside = yes
			visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).End )]"
			texture = "gfx/interface/tiles/marble_tile_l.dds"
			datacontext = "[GetScriptedGui('country_details')]"
			widget = {
				name = "background"
				using = Large_window_type
				size = { 100% 100% }
				alwaystransparent = yes
				position = { 0 0 }
				
				blockoverride "width_L"
				{
					size = { 200 64 }
				}
				blockoverride "width_R"
				{
					size = { 200 64 }
				}
				blockoverride "header_width"
				{
					size = { 360 54 }
				}
				blockoverride "header"
				{
					using = MarbleButtonFontL
					fontsize = 29
					text = "Country Details"
					tooltip = ""
				}
			}
			flowcontainer = {
				position = { 80 66 }
				direction = vertical
				spacing = 10
				textbox = {
					text = "Test"
					using = MarbleButtonFontS
					fontcolor = { 0 0 0 1 }
					parentanchor = hcenter|top
					align = center
					scale = 1.25
					size = { 0 20 }
				}
			}
			square_close_button = {
				position = { -12 12 }
				parentanchor = top|right
				datacontext = "[GetScriptedGui('country_details_close')]"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot( Player.MakeScope ).End)]"
				tooltip = "CLOSE"
				size = { 42 42 }
			}
		
		}
	
	}

}


